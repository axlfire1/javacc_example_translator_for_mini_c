PARSER_BEGIN(Traductor)

import java.io.*;
  
  public class Traductor{

   public static void main(String args[]) throws ParseException {
   BufferedReader Nuevo= new BufferedReader(new InputStreamReader(System.in));
   String Cadena;  
Traductor parser;
   System.out.print("Ruta y Nombre del archivo: ");
   try{
    Cadena=Nuevo.readLine();
   }catch(IOException e){
   	System.out.println("Error al leer la cadena");
   	return;
   }
   try{
    parser = new Traductor(new FileInputStream(Cadena));
   }catch(FileNotFoundException e){
   	System.out.println("El archivo "+Cadena+" no se encuentra");
   	return;
   }
   while(parser.Input());
  }
 }

 
PARSER_END(Traductor)

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CHAR: "char" >
| < CLEAR: "clrscr">
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTRN: "extern" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < INT: "int" >
| < LONG: "long" >
| < MAIN: "main" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < REG: "register" >
| < RETURN: "return" >
| < SHORT: "short" >
| < SZOF: "sizeof" >
| < STATIC: "static" >
| < SWITCH: "switch" >
| < TRUE: "true" >
| < TYPE: "typedef" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < INCLUDE: "#include" >
| < DEF: "#define" >
| < STDIO: "<stdio.h>" >
| < CONIO: "<conio.h>" >
| < SCANF: "scanf">
| < PRINTF: "printf">  
| < NUM: (["0"-"9"])+>
| < Id: (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9"])* >
}


TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/*TOKEN : //
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}*/

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < PLUSASSIGN: "+=" >

}


 SKIP :
 {
   " "
 | "\t"
 | "\n"
 | "\r"
 }




boolean Input() :
{}
{
 MiniC()
{
System.out.println("Es una instruccion aceptada");
   return true;
}
|<EOF>
  {
   System.out.println("Codigo analizado exitosamente");
   return false;
  }
}

void MiniC():
{}
{
(<INCLUDE>Biblioteca())+

(Variables())?

(<VOID>)?<MAIN><LPAREN><RPAREN><LBRACE>
(<CLEAR><LPAREN><RPAREN><SEMICOLON>)?
(Variables())?
(<CLEAR><LPAREN><RPAREN><SEMICOLON>)?
(Expresiones())+
<RBRACE>

} 

void Biblioteca():
{}
{
<STDIO>|<CONIO>
}

void Variables():
{}
{
(<INT><Id>Declaracion()|<CHAR><Id>Declaracion())+
}

void Declaracion():
{}
{
<COMMA><Id>Declaracion()|<SEMICOLON>
}

void Expresiones():
{}
{
 Function()|Control()|Operaciones()
}

void Function():
{}
{
	FuncionPrint() 
|  <SCANF><LPAREN><STRING_LITERAL>ContenidoScanf()<RPAREN><SEMICOLON>
}

void FuncionPrint():
{}
{
PrintfSencillo() ComplementoPrintf()
}

void PrintfSencillo():
{}
{
<PRINTF><LPAREN><STRING_LITERAL>
}

void ComplementoPrintf():
{}
{
<COMMA><Id>(SiguenteDeclaracion())?<RPAREN><SEMICOLON>|<RPAREN><SEMICOLON>
}

void SiguenteDeclaracion():
{}
{
<COMMA><Id>
}

void ContenidoScanf():
{}
{
<COMMA><BIT_AND><Id>
}

void Control():
{}
{
  <IF><LPAREN>Condicion()((Operaciones())+)?<RPAREN>Termina() 
| <FOR><LPAREN>ContenidoFor()<RPAREN> TerminaFor()
| <WHILE><LPAREN><RPAREN>Termina()
}

void TerminaFor():
{}
{
<LBRACE>((Operaciones())+)?<RBRACE>
}

void ContenidoFor():
{}
{
Asignacion()<SEMICOLON>Condicion()<SEMICOLON><Id>Flujo()
}

void Asignacion():
{}
{
	
 <Id><ASSIGN>SigueAsignacion()
	}	
	
void SigueAsignacion():
{}
{
Terminacion()|Operaciones()
}
	
void Flujo():
{}
{
<INCR>|<DECR>
}

void Termina():
{}
{
<SEMICOLON>|<LBRACE>Secuencia()(FuncionElse())?|Function()|Control()|(Operaciones())+
}

void FuncionElse():
{}
{
<ELSE>TerminaElse()
}

void TerminaElse():
{}
{
<LBRACE>Secuencia()|Expresiones()
}

void Secuencia():
{}
{
(Expresiones())+<RBRACE>|<RBRACE>
}

void Condicion():
{}
{
<Id>Comparador()|<NUM>Comparador()
}

void Comparador():
{}
{
  < GT >Terminacion()
| < LT >Terminacion()
| < EQ >Terminacion()
| < LE >Terminacion()
| < GE >Terminacion()
| < NE >Terminacion()
| < SC_OR >Terminacion()
| < SC_AND >Terminacion()
| < REM >Terminacion()
}

void Terminacion():
{}
{
<NUM>|<Id>
}

void Operaciones():
{}
{
OperacionesSencillas()
}

void OperacionesSencillas():
{}
{
Terminacion()Operador()Terminacion()<SEMICOLON>|Agrupaciones()
}

void Agrupaciones():
{}
{
<LPAREN>OperacionesSencillas()<RPAREN>((<SEMICOLON>)?|(Operador()OperacionesSencillas()))
}

void Operador():
{}
{
  < PLUS >
| < ASSIGN >
| < MINUS >
| < STAR >
| < SLASH >
| < PLUSASSIGN >
| Flujo()
}